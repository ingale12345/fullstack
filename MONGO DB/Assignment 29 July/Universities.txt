1. get all documents where country is Spain and city is Salamanca

test> db.universities.aggregate([{$match:{country:"Spain",city:"Salamanca"}}])
[
  {
    _id: ObjectId("62e368481fd0f72bc136f023"),
    country: 'Spain',
    city: 'Salamanca',
    name: 'USAL',
    location: { type: 'Point', coordinates: [ -5.6722512, 17, 40.9607792 ] },
    students: [
      { year: 2014, number: 24774 },
      { year: 2015, number: 23166 },
      { year: 2016, number: 21913 },
      { year: 2017, number: 21715 }
    ]
  },
  {
    _id: ObjectId("62e368481fd0f72bc136f024"),
    country: 'Spain',
    city: 'Salamanca',
    name: 'UPSA',
    location: { type: 'Point', coordinates: [ -5.6691191, 17, 40.9631732 ] },
    students: [
      { year: 2014, number: 4788 },
      { year: 2015, number: 4821 },
      { year: 2016, number: 6550 },
      { year: 2017, number: 6125 }
    ]
  }
]
test>


2. show only country and city of every document

test> db.universities.aggregate([{$project:{country:1,city:1,_id:0}}])
[
  { country: 'Spain', city: 'Salamanca' },
  { country: 'Spain', city: 'Salamanca' }
]
test>

3. group the collection with university name and find out total no of documents per group
test> db.universities.aggregate([{$group:{_id:"$name",NumberOfDocs:{$sum:1}}}])
[ { _id: 'USAL', NumberOfDocs: 1 }, { _id: 'UPSA', NumberOfDocs: 1 } ]
test>

4. group the collection with university name and find out total no of documents per group. Then show the output in a new collection.

test> db.universities.aggregate([{$group:{_id:"$name",NumberOfDocs:{$sum:1}}},{$out:{db:"test",coll:"University"}}])

test>

test> db.university.find({}).count();
0
test> db.University.find({}).count();
2
test> db.University.find({})
[ { _id: 'USAL', NumberOfDocs: 1 }, { _id: 'UPSA', NumberOfDocs: 1 } ]


5. Get all the documents were university name id 'USAL' and show a separate document for every element of the students array.
test> db.universities.aggregate([{$match:{name:"USAL"}},{$unwind:"$students"}])
[
  {
    _id: ObjectId("62e368481fd0f72bc136f023"),
    country: 'Spain',
    city: 'Salamanca',
    name: 'USAL',
    location: { type: 'Point', coordinates: [ -5.6722512, 17, 40.9607792 ] },
    students: { year: 2014, number: 24774 }
  },
  {
    _id: ObjectId("62e368481fd0f72bc136f023"),
    country: 'Spain',
    city: 'Salamanca',
    name: 'USAL',
    location: { type: 'Point', coordinates: [ -5.6722512, 17, 40.9607792 ] },
    students: { year: 2015, number: 23166 }
  },
  {
    _id: ObjectId("62e368481fd0f72bc136f023"),
    country: 'Spain',
    city: 'Salamanca',
    name: 'USAL',
    location: { type: 'Point', coordinates: [ -5.6722512, 17, 40.9607792 ] },
    students: { year: 2016, number: 21913 }
  },
  {
    _id: ObjectId("62e368481fd0f72bc136f023"),
    country: 'Spain',
    city: 'Salamanca',
    name: 'USAL',
    location: { type: 'Point', coordinates: [ -5.6722512, 17, 40.9607792 ] },
    students: { year: 2017, number: 21715 }
  }
]
test>

6. Get all the documents were university name id 'USAL' and show a separate document for every element of the students array. 
Then display only student year and number. Sort the collection in descending order of student number.

test> db.universities.aggregate([{$match:{name:"USAL"}},{$unwind:"$students"},{$project:{"students.year":1,_id:0,"students.number":1}},{$sort:{"students.number":1}}])
[
  { students: { year: 2017, number: 21715 } },
  { students: { year: 2016, number: 21913 } },
  { students: { year: 2015, number: 23166 } },
  { students: { year: 2014, number: 24774 } }
]


7. Get all the documents were university name id 'USAL' and show a separate document for every element of the students array. 
Then display only student year and number.
Sort the collection in descending order of student number. Limit number of documents to 2.

test> db.universities.aggregate([{$match:{name:"USAL"}},{$unwind:"$students"},{$project:{"students.year":1,"students.number":1,_id:0}},{$sort:{"students.number":1}},{$sort:{"students.number":-1}},{$limit:2}])
[
  { students: { year: 2014, number: 24774 } },
  { students: { year: 2015, number: 23166 } }
]
test>
